generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id           String     @id
  title        String
  thumbnailURL String
  saleability  Boolean
  buyLink      String
  description  String
  previewLink  String
  Review       Review[]
  userBook     userBook[]
}

model gameResult {
  id        Int      @id @default(autoincrement())
  userid    String
  timestamp DateTime @db.Date
  score     Int
  user      User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  public        Boolean      @default(false)
  accounts      Account[]
  review        Review[]
  sessions      Session[]
  gameResult    gameResult[]
  userBook      userBook[]
}

model userBook {
  id        Int      @id @default(autoincrement())
  userId    String
  bookId    String
  timestamp DateTime @db.Date
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  bookId    String
  createdAt DateTime @db.Date
  content   String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
